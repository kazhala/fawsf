#!/bin/sh
# aws ec2 script that will list ec2 instances on your default aws account
# based on flags and perform different actions

# import helper scripts
mydir="${0%/*}"
source "$mydir"/shsrc/confirm.sh
source "$mydir"/shsrc/ec2/helper/get_instance.sh
source "$mydir"/shsrc/ec2/helper/get_region.sh
source "$mydir"/shsrc/ec2/ssh_instance.sh
source "$mydir"/shsrc/ec2/stop_instance.sh
source "$mydir"/shsrc/ec2/terminate_instance.sh
source "$mydir"/shsrc/ec2/usage.sh

# default args
action_command=''
selected_region=''
pem_location="$AWS_PEM"

# process the command to use
# shift to remove the command from the args
case "$1" in
  ssh)
    action_command='ssh'
    shift;;
  stop)
    action_command='stop'
    shift;;
  terminate)
    action_command='terminate'
    shift;;
esac

# process flags
while getopts ":rhp:" opt
do
  case "$opt" in
    r)
      # -r set a region to use, otherwise default region will be used
      echo "Select a region"
      selected_region=$(get_region)
      [[ -z "$selected_region" ]] && echo "No region selected" && exit 1;;
    p)
      # user specified path for pem file
      pem_location="$OPTARG";;
    h)
      # display usage and exit
      usage "$action_command"
      exit 0;;
    *)
      echo "Invalid option $OPTARG" >&2
      usage "$action_command"
      exit 1;;
  esac
done

[[ -z "$action_command" ]] && echo "No action_command command detected (ssh|stop|terminate)"

# get the instance data
# ${selected_instance} data format
# $1  $2      $3      $4
# id  status  keypair publicIp
selected_instance=$(get_instance "$selected_region")
instance_id=$(echo "$selected_instance" | awk '{print $1}')
instance_status=$(echo "$selected_instance" | awk '{print $2}')
instance_key_pem=$(echo "$selected_instance" | awk '{print $3 ".pem"}')
instance_ip_address=$(echo "$selected_instance" | awk '{print $4}')
# exit if no instance selected
[[ -z "$selected_instance" ]] && echo "No instance selected, exiting.." && exit 1
# default action_command, ssh into the instance
if [[ "$action_command" == 'ssh' ]]; then
  ssh_instance "$instance_id" "$instance_status" "$instance_key_pem" "$instance_ip_address" "$pem_location"
elif [[ "$action_command" == 'stop' ]]; then
  stop_instance "$instance_id" "$instance_status"
elif [[ "$action_command" == 'terminate' ]]; then
  terminate_instance "$instance_id"
else
  echo "$selected_instance"
fi
