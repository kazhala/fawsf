#!/usr/bin/env python3

# python script to automate the CRUD of cloudformation
import boto3
import subprocess
import argparse
import sys
from botocore.exceptions import ClientError
from pyfaws.cform.delete_stack import delete_stack
from pyfaws.cform.update_stack import update_stack
from pyfaws.cform.helper.get_stack import get_stack
from pyfaws.cform.create_stack import create_stack
from pyfaws.cform.drift_stack import drift_stack
from pyfaws.pyfzf import PyFzf


parser = argparse.ArgumentParser(
    description='CRUD operation on aws cloudformation.',
    usage='faws cform [-h] {update,create,delete} ...'
)
subparsers = parser.add_subparsers(dest='subparser_name')
# update command flags
update_cmd = subparsers.add_parser(
    'update', description='update an existing stack')
update_cmd.add_argument('-t', '--tag', action='store_true',
                        default=False, help='update the tag during update')
update_cmd.add_argument('-R', '--root', action='store_true', default=False,
                        help='search local file from root instead of current directory')
update_cmd.add_argument('-p', '--path', nargs=1, action='store', default=None,
                        help='specifie a path where the local file is stored')
update_cmd.add_argument('-l', '--local', action='store_true',
                        default=False, help='upload local file')
update_cmd.add_argument('-r', '--replace', action='store_true', default=False,
                        help='replace current template to update')
update_cmd.add_argument('-w', '--wait', action='store_true', default=False,
                        help='Pause the script and wait for update complete signal, max wait time 60mins')
# create command flags
create_cmd = subparsers.add_parser('create', description='create a new stack')
create_cmd.add_argument('-R', '--root', action='store_true', default=False,
                        help='search local file from root instead of current directory')
create_cmd.add_argument('-p', '--path', nargs=1, action='store', default=None,
                        help='specifie a path where the local file is stored')
create_cmd.add_argument('-l', '--local', action='store_true',
                        default=False, help='upload local file')
create_cmd.add_argument('-w', '--wait', action='store_true', default=False,
                        help='Pause the script and wait for create complete signal, max wait time 60mins')
# delete and ls doesn't have flags
delete_cmd = subparsers.add_parser(
    'delete', description='delete an existing stack')
delete_cmd.add_argument('-w', '--wait', action='store_true', default=False,
                        help='Pause the script and wait for delete complete signal, max wait time 60mins')
ls_cmd = subparsers.add_parser(
    'ls', description='list and print infomation of the selcted stack')
drift_cmd = subparsers.add_parser(
    'drift', description='drift detection on the stack/resources')
drift_cmd.add_argument('-i', '--id', nargs=1, action='store', default=None,
                       help='Drift detection id, used to check results on the driftection')
args = parser.parse_args()

try:
    # if no argument provided, display help message
    if not len(sys.argv) > 1:
        available_commands = ['update', 'create', 'delete', 'ls']
        command_fzf = PyFzf()
        for command in available_commands:
            command_fzf.append_fzf(command)
            command_fzf.append_fzf('\n')
        selected_command = command_fzf.execute_fzf(
            empty_allow=True, print_col=1, preview='faws cform {} -h')
        # display help based on help message
        if selected_command == 'update':
            update_cmd.print_help()
        elif selected_command == 'create':
            create_cmd.print_help()
        elif selected_command == 'delete':
            delete_cmd.print_help()
        elif selected_command == 'ls':
            ls_cmd.print_help()
        exit()
    # create a new stack
    if args.subparser_name == 'create':
        create_stack(args)

    # operation on the existing stack(update/delete/exit)
    else:
        # get the selected_stack {'StackName': str, 'StackDetails': {}}
        selected_stack = get_stack()
        if args.subparser_name == 'update':
            update_stack(
                args, selected_stack['StackName'], selected_stack['StackDetails'])
        elif args.subparser_name == 'delete':
            delete_stack(args, selected_stack['StackName'],
                         selected_stack['StackDetails'])
        # if no action detected
        elif args.subparser_name == 'ls':
            print(selected_stack['StackDetails'])
        elif args.subparser_name == 'drift':
            drift_stack(
                args, selected_stack['StackName'])

except subprocess.CalledProcessError as e:
    print('No selection made')
except ClientError as e:
    print(e)
except KeyboardInterrupt:
    print('\nExit')
except Exception as e:
    print(e)
