#!/usr/bin/env python3
# python script to automate the CRUD of cloudformaiton
import boto3
import subprocess
import argparse
from botocore.exceptions import ClientError
# import fzf python class
from fawsf_py.fzf_py import fzf_py
from fawsf_py.awscform.helper import *
from fawsf_py.awscform.process_template import *
from fawsf_py.awscform.s3_operations import *


parser = argparse.ArgumentParser(
    description='CRUD operation on aws cloudformation.')
parser.add_argument('-n', '--new', action='store_true',
                    default=False, help='create a new stack')
parser.add_argument('-r', '--replace', action='store_true', default=False,
                    help='replace current template to update')
parser.add_argument('-u', '--update', action='store_const',
                    const='update', default=None, help='update the selected stack')
parser.add_argument('-d', '--delete', action='store_const',
                    const='delete', default=None, help='delete the selected stack')
parser.add_argument('-l', '--local', action='store_true',
                    default=False, help='upload local file')
parser.add_argument('-p', '--path', nargs=1, action='store', default=None,
                    help='specifie a path where the local file is stored')
parser.add_argument('-R', '--root', action='store_true', default=False,
                    help='search local file from root instead of current directory')
parser.add_argument('-t', '--tag', action='store_true',
                    default=False, help='update the tag as well')
parser.add_argument('-T', '--newtag', action='store_true',
                    default=False, help='create new tags during update')
args = parser.parse_args()


# initialize the cloudformation boto3 client
cloudformation = boto3.client('cloudformation')
s3 = boto3.client('s3')
# using s3 resource to read the object data for dynamic parameter input
s3_resource = boto3.resource('s3')

try:
    # create a new stack
    if args.new:
        # local flag specified
        if args.local:
            local_path = ''
            # local path specified
            if args.path:
                local_path = args.path[0]
            else:
                # use find or fd to find local file
                file_finder_fzf = fzf_py()
                # search from root dir if root flag sepcified
                local_path = file_finder_fzf.get_local_file(args.root)
            if is_yaml(local_path):
                stack_name = input('StackName: ')
                file_data = process_yaml_file(local_path)
                create_parameters = process_stack_params(
                    file_data['dictYaml']['Parameters'])
                tags = get_stack_tags()
                response = cloudformation.create_stack(
                    StackName=stack_name,
                    TemplateBody=file_data['body'],
                    Parameters=create_parameters,
                    Tags=tags
                )
                print(response)

        # if no local file flag, get from s3
        else:
            selected_bucket = get_s3_bucket()
            # get the s3 file path
            selected_file = get_s3_file(selected_bucket)

            if is_yaml(selected_file):
                stack_name = input('StackName: ')
                file_data = get_file_data(
                    selected_bucket, selected_file, 'yaml')
                create_parameters = process_stack_params(
                    file_data['Parameters'])
                tags = get_stack_tags()
                # s3 object url
                template_body_loacation = get_s3_url(
                    selected_bucket, selected_file)
                response = cloudformation.create_stack(
                    StackName=stack_name,
                    TemplateURL=template_body_loacation,
                    Parameters=create_parameters,
                    Tags=tags
                )
                print(response)

    # operation on the  existing stack
    else:
        # get all the stacks in the default region
        response = cloudformation.describe_stacks()
        stack_fzf = fzf_py()
        for stack in response['Stacks']:
            stack_fzf.append_fzf(f"name: {stack['StackName']}")
            stack_fzf.append_fzf(4*' ')
            stack_fzf.append_fzf(f"{stack['Description']}")
            stack_fzf.append_fzf('\n')
        selected_stack = stack_fzf.execute_fzf()

        action_to_take = None
        if args.update:
            action_to_take = args.update
        elif args.delete:
            action_to_take = args.delete
        # take user actions
        while action_to_take != 'update' and action_to_take != 'delete' and action_to_take != 'exit':
            action_to_take = input(
                'What do you want to do with the stack?(update/delete/exit): ')

        if action_to_take == 'update':
            use_current_template = not args.replace
            if use_current_template:
                # get the selected stack details
                stack_details = search_dict_in_list(
                    selected_stack, response['Stacks'], 'StackName')
                print('Enter new parameter values, skip to use original value')
                parameters = stack_details['Parameters']
                updated_parameters = []
                for parameter in parameters:
                    # take new values
                    parameter_value = input(
                        f'{parameter["ParameterKey"]}({parameter["ParameterValue"]}): ')
                    # push to list
                    if not parameter_value:
                        updated_parameters.append({
                            'ParameterKey': parameter['ParameterKey'],
                            'UsePreviousValue': True
                        })
                    else:
                        updated_parameters.append({
                            'ParameterKey': parameter['ParameterKey'],
                            'ParameterValue': parameter_value
                        })
                tags = stack_details['Tags']
                if args.tag:
                    new_tags = []
                    print('Skip the value to use previouse value')
                    print('Enter delete in both field to remove a tag')
                    for tag in tags:
                        tag_key = input(f"Key({tag['Key']}): ")
                        if not tag_key:
                            tag_key = tag['Key']
                        tag_value = input(f"Value({tag['Value']}): ")
                        if not tag_value:
                            tag_value = tag['Value']
                        if tag_key == 'delete' and tag_value == 'delete':
                            continue
                        new_tags.append(
                            {'Key': tag_key, 'Value': tag_value})
                    tags = new_tags
                if args.newtag:
                    new_tags = get_stack_tags()
                    for new_tag in new_tags:
                        tags.append(new_tag)

                # update the stack
                response = cloudformation.update_stack(
                    StackName=selected_stack,
                    UsePreviousTemplate=True,
                    Parameters=updated_parameters,
                    Tags=tags
                )
            else:
                print('Choose a template to upload')
            print(response)
        else:
            exit()

except subprocess.CalledProcessError as e:
    print('No selection made')
except ClientError as e:
    print(e)
except KeyboardInterrupt:
    print('\nExit')
except Exception as e:
    print(e)
