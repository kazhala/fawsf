#!/usr/bin/env python3
# python script to automate the CRUD of cloudformaiton
import boto3
import subprocess
import argparse
from botocore.exceptions import ClientError
from faws_py.awscform.create_stack import create_stack
from faws_py.awscform.helper.get_stack import get_stack
from faws_py.awscform.update_stack import update_stack
from faws_py.awscform.delete_stack import delete_stack


parser = argparse.ArgumentParser(
    description='CRUD operation on aws cloudformation.')
parser.add_argument('-n', '--new', action='store_true',
                    default=False, help='create a new stack')
parser.add_argument('-r', '--replace', action='store_true', default=False,
                    help='replace current template to update')
parser.add_argument('-u', '--update', action='store_const',
                    const='update', default=None, help='update the selected stack')
parser.add_argument('-d', '--delete', action='store_const',
                    const='delete', default=None, help='delete the selected stack')
parser.add_argument('-l', '--local', action='store_true',
                    default=False, help='upload local file')
parser.add_argument('-p', '--path', nargs=1, action='store', default=None,
                    help='specifie a path where the local file is stored')
parser.add_argument('-R', '--root', action='store_true', default=False,
                    help='search local file from root instead of current directory')
parser.add_argument('-t', '--tag', action='store_true',
                    default=False, help='update the tag as well')
parser.add_argument('-T', '--newtag', action='store_true',
                    default=False, help='create new tags during update')
args = parser.parse_args()


try:
    # create a new stack
    if args.new:
        create_stack(args)

    # operation on the existing stack(update/delete/exit)
    else:
        # get the selected_stack {'StackName': str, 'StackDetails': {}}
        selected_stack = get_stack()
        # process flags and ask user for input if needed
        action_to_take = None
        if args.update:
            action_to_take = args.update
        elif args.delete:
            action_to_take = args.delete
        # take user actions
        while action_to_take != 'update' and action_to_take != 'delete' and action_to_take != 'exit':
            action_to_take = input(
                'What do you want to do with the stack?(update/delete/exit): ')
        if action_to_take == 'update':
            update_stack(
                args, selected_stack['StackName'], selected_stack['StackDetails'])

        elif action_to_take == 'delete':
            delete_stack(selected_stack['StackName'])
        else:
            print(selected_stack)
            # exit()

except subprocess.CalledProcessError as e:
    print('No selection made')
except ClientError as e:
    print(e)
except KeyboardInterrupt:
    print('\nExit')
except Exception as e:
    print(e)
