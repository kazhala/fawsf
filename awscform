#!/usr/bin/env python3
# python script to automate the CRUD of cloudformaiton
import boto3
import subprocess
import json
import argparse
import yaml
from botocore.exceptions import ClientError
from helper.fzf_py import fzf_py
from helper.awscform import *

# make yaml class ignore all undefined tags and keep parsing
# yaml doesn't understand all the !Ref, !FindInMap etc
yaml.SafeLoader.add_multi_constructor('!', lambda loader, suffix, node: None)

parser = argparse.ArgumentParser(
    description='CRUD operation on aws cloudformation.')
parser.add_argument('-n', '--new', action='store_true',
                    default=False, help='create a new stack')
parser.add_argument('-r', '--replace', action='store_true', default=False,
                    help='replace current template to update')
parser.add_argument('-u', '--update', action='store_const',
                    const='update', default=None, help='update the selected stack')
parser.add_argument('-d', '--delete', action='store_const',
                    const='delete', default=None, help='delete the selected stack')
parser.add_argument('-l', '--local', action='store_true',
                    default=False, help='upload local file')
parser.add_argument('-p', '--path', nargs=1, action='store', default=None,
                    help='specifie a path where the local file is stored')
args = parser.parse_args()


# initialize the cloudformation boto3 client
cloudformation = boto3.client('cloudformation')
s3 = boto3.client('s3')
# using s3 resource to read the object data for dynamic parameter input
s3_resource = boto3.resource('s3')

try:
    # create a new stack
    if args.new:
        if args.local:
            local_path = ''
            if args.path:
                local_path = args.path[0]
            else:
                file_finder_fzf = fzf_py()
                local_path = file_finder_fzf.get_local_file()
            if is_yaml(local_path):
                # read yaml into python dict
                with open(local_path, 'r') as body:
                    body = yaml.safe_load(body)
                parameters = body['Parameters']
                stack_name = input('StackName: ')
                create_parameters = process_yaml_params(parameters)
                print(create_parameters)

        else:
            # get the s3 bucket
            response = s3.list_buckets()
            s3_bucket_fzf = fzf_py()
            # prepare fzf string, require each line a bucket
            for bucket in response['Buckets']:
                s3_bucket_fzf.append_fzf(f"bucket: {bucket['Name']}")
                s3_bucket_fzf.append_fzf('\n')
            selected_bucket = s3_bucket_fzf.execute_fzf()

            # get the s3 object
            response = s3.list_objects(
                Bucket=selected_bucket
            )
            s3_object_fzf = fzf_py()
            # prepare the fzf input for selecting object
            for s3_object in response['Contents']:
                s3_object_fzf.append_fzf(f"object: {s3_object['Key']}")
                s3_object_fzf.append_fzf('\n')
            selected_object = s3_object_fzf.execute_fzf()

            if is_yaml(selected_object):
                # get the bucket region for geting the url of the template
                response = s3.get_bucket_location(Bucket=selected_bucket)
                bucket_location = response['LocationConstraint']
                # read the file data into body variable and use yaml package to process it
                s3_object = s3_resource.Object(
                    selected_bucket, selected_object)
                body = s3_object.get()['Body'].read()
                # conver to string from byte
                body = str(body, 'utf-8')

                # read yaml to pythong dict
                body = yaml.safe_load(body)
                parameters = body['Parameters']
                stack_name = input('StackName: ')
                create_parameters = process_yaml_params(parameters)
                # s3 object url
                template_body_loacation = f"https://s3-{bucket_location}.amazonaws.com/{selected_bucket}/{selected_object}"
                response = cloudformation.create_stack(
                    StackName=stack_name,
                    TemplateURL=template_body_loacation,
                    Parameters=create_parameters
                )
                print(response)

    # operation on the  existing stack
    else:
        # get all the stacks in the default region
        response = cloudformation.describe_stacks()
        stack_fzf = fzf_py()
        for stack in response['Stacks']:
            stack_fzf.append_fzf(f"name: {stack['StackName']}")
            stack_fzf.append_fzf(4*' ')
            stack_fzf.append_fzf(f"{stack['Description']}")
            stack_fzf.append_fzf('\n')
        selected_stack = stack_fzf.execute_fzf()

        action_to_take = None
        if args.update:
            action_to_take = args.update
        elif args.delete:
            action_to_take = args.delete
        # take user actions
        while action_to_take != 'update' and action_to_take != 'delete' and action_to_take != 'exit':
            action_to_take = input(
                'What do you want to do with the stack?(update/delete/exit): ')

        if action_to_take == 'update':
            use_current_template = not args.upload
            if use_current_template:
                # get the selected stack details
                stack_details = search_stack_in_stacks(
                    selected_stack, response['Stacks'])
                print('Enter new parameter values, skip to use original value')
                parameters = stack_details['Parameters']

                updated_parameters = []
                for parameter in parameters:
                    # take new values
                    parameter_value = input(
                        f'{parameter["ParameterKey"]}({parameter["ParameterValue"]}): ')
                    # push to list
                    if not parameter_value:
                        updated_parameters.append({
                            'ParameterKey': parameter['ParameterKey'],
                            'UsePreviousValue': True
                        })
                    else:
                        updated_parameters.append({
                            'ParameterKey': parameter['ParameterKey'],
                            'ParameterValue': parameter_value
                        })

                # update the stack
                response = cloudformation.update_stack(
                    StackName=selected_stack,
                    UsePreviousTemplate=True,
                    Parameters=updated_parameters
                )
            else:
                print('Choose a template to upload')
            print(response)
        else:
            exit()

except subprocess.CalledProcessError as e:
    print('No selection made')
except ClientError as e:
    print(e)
except KeyboardInterrupt:
    print('\nExit')
except Exception as e:
    print(e)
