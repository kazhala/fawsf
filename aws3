#!/bin/sh
# perform CRUD operations in s3 interactively
# @params
# $operation_type: default to upload, determines what operation(upload/download/delete/bucket) to take
# $operation_cmd: default to cp, determine what cmd to use in s3 command(cp/mv/sync)
# $bucket: bucket name
# $target_bucket: target bucket name
# $s3_path: s3 bucket path, root would be bucket name, bucket/path
# $target_s3_path: when operation_type=bucket, the target s3 location for file transfer
# $local_path: local file or directory path for download or upload, need to be set by -P flag
# $recursive: determine if the -r flag is set for recursive operation
# $hidden: determine if the local file search should include hidden files
# $search_from_root: determine if the find/fd should search from root

# import helper scripts
mydir="${0%/*}"
source "$mydir"/faws_sh/confirm.sh
source "$mydir"/faws_sh/search_file.sh
source "$mydir"/faws_sh/aws3/helper/get_bucket.sh
source "$mydir"/faws_sh/aws3/helper/get_bucket_path.sh
source "$mydir"/faws_sh/aws3/upload_file_s3.sh
source "$mydir"/faws_sh/aws3/delete_file_s3.sh
source "$mydir"/faws_sh/aws3/download_file_s3.sh
source "$mydir"/faws_sh/aws3/transfer_file_s3.sh

# help message
function usage() {
  echo "usage: aws3 [-h] [-p] [-P] [-r] [-R] [-d] [-D] [-H] [-m] [-b]\n"
  echo "perform CRUD operations with cp/mv/rm in s3 bucket interactively\n"
  echo "optional arguments:\n"
  echo "-h\tshow this help message and exit\n"
  echo "-p\tspecify a path after this flag and skip s3 bucket/path selection\n"
  echo "-P\tspecify a local path for operation\n"
  echo "-r\toperate recursively on s3, e.g. cp entire bucket/folder\n"
  echo "-R\tsearch local file from root directory, note: slow if no fd\n"
  echo "-D\tuse rm operations to delete files on s3, add -r to delete folder\n"
  echo "-d\tdownload the select file to local directory, add -r to download folder\n"
  echo "-H\tInclude hidden folder or directory\n"
  echo "-m\tuse mv instead of cp command, mv/cut, cp/copy\n"
  echo "-b\ttransfer file between bucket"
}

# default operation_cmd
operation_cmd='cp'
operation_type='upload'
local_path=''
recursive='false'
hidden='false'
search_from_root='false'

while getopts ":p:hrDmdHP:Rb" opt
do
  case "$opt" in
    p)
      # -p expect a path bucket/path
      if [[ -z "$s3_path" ]]; then
        s3_path="$OPTARG"
      elif [[ -z "$target_s3_path" ]]; then
        target_s3_path="$OPTARG"
      fi;;
    P)
      # specify a local file path
      local_path="$OPTARG";;
    r)
      # set recursive flag
      recursive='true';;
    R)
      # search local file/path from root
      search_from_root='true';;
    D)
      # remove file -d Delete
      operation_type='delete';;
    m)
      # mv instead of cp
      operation_cmd='mv';;
    d)
      # download file
      operation_type='download';;
    H)
      hidden='true';;
    h)
      usage
      exit 0;;
    b)
      operation_type='bucket';;
    *)
      echo "Invalid option: $OPTARG" >&2
      usage
      exit 1;;
  esac
done

# get the bucket path before any operation
if [[ -z "$s3_path" ]]; then
  echo "Select a bucket for $operation_type"
  # get bucekt name
  bucket=$(get_bucket)
  [[ -z "$bucket" ]] && echo "No bucket selected" && exit 1
  echo "Select a path where $operation_type should be performed"
  # get subfolders in the bucket or root
  s3_path=$(get_bucket_path "$bucket" "$operation_type" "$recursive")
  [[ -z "$s3_path" ]] && echo "No option/path selected" && exit 1
fi

# process operation type and call different scripts
if [[ "$operation_type" == 'upload' ]]; then
  upload_file_s3 "$operation_cmd" "$s3_path" "$recursive" "$hidden" "$search_from_root" "$local_path"
elif [[ "$operation_type" == 'download' ]]; then
  download_file_s3 "$operation_cmd" "$s3_path" "$recursive" "$hidden" "$search_from_root" "$local_path"
elif [[ "$operation_type" == 'delete' ]]; then
  delete_file_s3  "$s3_path" "$recursive"
elif [[ "$operation_type" == 'bucket' ]]; then
  if [[ -z "$target_s3_path" ]]; then
    echo "Select a target bucket for file transfer between buckets"
    # select a second bucket
    target_bucket=$(get_bucket)
    [[ -z "$target_bucket" ]] && echo "Target bucket not selected" && exit 1
    echo "Select a path where the file should be $operation_cmd"
    # select second bucket path
    target_s3_path=$(get_bucket_path "$target_bucket" "$operation_type" 'true')
    [[ -z "$target_s3_path" ]] && echo "Target path not specified" && exit 1
  fi
  transfer_file_s3 "$operation_cmd" "$s3_path" "$target_s3_path" "$recursive"
fi
